## Picom Window Compositor Configuration

## Comments starting with '##' describe a setting, whereas comments starting 
## with '#' are used to comment out a setting or a part of a setting, with
## the exception of cosmetic section headers; -< Ligature Support Assumed >-

## Above each setting is its description, shortened or reworded in some cases.
## Alongside each setting is its default value, and then (acceptable values)

## 80 Columns is the target width for this file, but it's not a hard limit.


##
##
## (Vim) Quickly jump to section by using Shift+8 (*) to set the search pattern
## while hovering over the section ID for the section you'd like to go to.
## To return, just go to the next match, and it'll bring you back here.
##
## ----< 4252bda5 >-  General Window Opacity Settings
## ----< 76057e75 >-  Winbdow Opacity Rules
## ----< 4a0cdc2e >-  Window Blur Method
## ----< 6710bb5b >-  General Window Blur Settings
## ----< 7d0a3097 >-  Window Shadow Settings
## ----< 0c04db4c >-  Window Fade Settings
## ----< 5f17e558 >-  Window Corners
## ----< 99b5d52f >-  Backend Settings
## ----< 3a649f2e >-  Window Type Settings
##
##
###########################


###############################################################################
## -------| General Opacity Settings |----------------------------| 4252bda5 |- 
###############################################################################

## Default opacity for active windows.
active-opacity = 1.00; # 1.0 (0.0 - 1.0) 


## Inactive window opacity.
inactive-opacity = 1.00; # 1.0 (0.1 - 1.0)


## Let inactive opacity set by -i override the 
## '_NET_WM_WINDOW_OPACITY' values of windows.
inactive-opacity-override = false; # true (true | false)


## Window titlebar and border opacity. Disabled by default.
frame-opacity = 1.0; # 1.0 (0.1 - 1.0)


## Default opacity for dropdown menus and popup menus.
# menu-opacity = 1.0; # 1.0 (0.1 - 1.0)


# How much to dim an inactive window.
inactive-dim = 0.10; # 0.0 (0.0 - 1.0)


## Use fixed inactive dim value, instead of adjusting according to window opacity.
# inactive-dim-fixed = 1.0; # 1.0 (0.0 - 1.0 | unspecified)


## Never consider these windows focused, if associated condition is met.
## Condition is in the form of PATTERN = VALUE, where pattern is an X
## window property and value is a string ot match against.
##
## e.g. 'class_g = "Firefox"' will ignore all Firefox windows.
# focus-exclude = []; # [] (["property='value'",])

focus_exclude = [
  "class_g = 'sto-cat'"
]




###############################################################################
## -------| Opacity Rules |---------------------------------------| 76057e75 |- 
###############################################################################
 

## Opacity rules; each window matched by OPACITY:PATTERN = VALUE, will have an
## opacity of OPACITY, where PATTERN is an X window property, and VALUE is the
## string to match against; picom-trans is recommended over this.
##
## Example:
##  opacity-rule = [ "80:class_g = 'Firefox'" ];
##
## Will give Firefox windows an opacity of 0.8, or 80%.
##
## Note:
##  We don't make any guarantee about possible conflicts with other programs
##  that set '_NET_WM_WINDOW_OPACITY' on frame or client windows.

#opacity-rule = ["100:class_g = 'Vmware-view'","100:class_g = 'Rofi'","100:class_g = 'okular'"];
opacity-rule = [
  "100:class_g = 'Vmware-view'",
  "100:class_g = 'okular'",
  "80:class_g = 'Rofi'",
  "100:class_g = 'steam_app_9900'",
  "100:class_g = 'sto-cat'",
  "90:class_g = 'Alacritty'",
  "95:class_g = 'kitty'",

  # Don't draw background windows on tabbed/stacked windows 
  "0:_NET_WM_STATE@[0]:32a *= '_NET_WM_STATE_HIDDEN'",  
  "0:_NET_WM_STATE@[1]:32a *= '_NET_WM_STATE_HIDDEN'",  
  "0:_NET_WM_STATE@[2]:32a *= '_NET_WM_STATE_HIDDEN'",  
  "0:_NET_WM_STATE@[3]:32a *= '_NET_WM_STATE_HIDDEN'", 
  "0:_NET_WM_STATE@[4]:32a *= '_NET_WM_STATE_HIDDEN'",

  # Hackish way to remove shadow from polybar (shadow-exclude not working)
  "99:name='Polybar tray window'"
];



###############################################################################
## -------| Blur Method |-----------------------------------------| 4a0cdc2e |- 
###############################################################################

## The 'gaussian', 'dual_kawase' and 'box' methods are not compatible by the 
## legacy backends. Different blur methods are enabled by different settings.
## 
## Here are the settings for each method:
##
##  - gaussian     < Wants >  blur-deviation, blur-size
##  - dual_kawase  < Wants >  blur-strength
##  - kernel       < Wants >  blur-kern
##  - box          < Wants >  blur-size
##
## Here is a copy of each setting:
##
# blur-method    = "kernel"; # ("kernel" | "gaussian" | "dual_kawase" | "box")
# blur-size      = 10;       # 3 (Int: 0+)
# blur-strength  = 10;       # 5 (Int: 0-20)
# blur-deviation = 10;       # 0.84089642 (Float: 0.0+)
# blur-kern      = "7x7box"; # "3x3box" ("NxNbox" | "N,N,N,N,N...")
##
##             _________________________
## METHOD  <--| The blur method to use. |
##             ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
##            ____________________________________________
## SIZE   <--| The blur radius for gaussian and box blur. |
##           | values below 3 barely show. Recommend 6.   | 
##            ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
#                ___________________________________________
## STRENGTH  <--| The strength of the blur for dual_kawase. |
##               ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
##                ____________________________________________
## DEVIATION  <--| The standard deviation for gaussian blur.  |
##               | The larger, the more of a "feather" effect.|
##                ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
##           _____________________________________________________
## KERN  <--| The convolution kernel to use for kernel blur.      |
##          | the format can be either "NxNbox" or "N,N,N,N,N..." |                                               
##          | where N is an unsigned integer ( N >= 0 )           |
##           ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯

blur-method    = "dual_kawase";
blur-strength  = 2;
blur-size      = 26;
blur-deviation = 12.0;
blur-kern      = "15,15,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,";



###############################################################################
#----------| General Blur Settings |------------------------------| 6710bb5b |- 
###############################################################################
##
## Blur exclusion rules; each window matched by PATTERN = VALUE, will not have
## its background blurred. PATTERN is an X window property, and VALUE is the
## string to match against. E.g. 'class_g = "Firefox"' will not blur Firefox.
#  
# Default: [ "window_type = 'dock'",
#            "window_type = 'desktop'",
#            "_GTK_FRAME_EXTENTS@:c" ];

blur-background-exclude = [
  "class_g = 'Polybar'",
  "class_g = 'i3-frame'"
];


## Blur background of semi-transparent / ARGB windows. Bad in performance, 
## #with driver-dependent behavior. Name subject to change without notice.
blur-background = false; # false (true | false)


## Blur background of windows when the window frame is not opaque. Performance
## is poor, with driver-dependent behavior. The name may change. Activating 
## this implicitly activates 'blur-background' (implied).
blur-background-frame = false; # false (true | false)


## Use fixed blur strength rather than adjusting per each window's opacity.
blur-background-fixed = false; # false (true | false)



###############################################################################
## -------| Shadows |---------------------------------------------| 7d0a3097 |- 
###############################################################################
 
## Enabled client-side shadows on windows. 
##
## Note desktop windows (windows with '_NET_WM_WINDOW_TYPE_DESKTOP') never get 
## shadows, unless explicitly requested using the wintypes option.
shadow = true; # false (true | false)


# The blur radius for shadows, in pixels.
shadow-radius = 10; # 12 (0+)


## The opacity of shadows.
shadow-opacity = 0.75; # 0.75 (0.0 - 1.0)


## The left offset for shadows, in pixels. (defaults to -15)
shadow-offset-x = -5; # -15 (0- | 0+)


## The top offset for shadows, in pixels. (defaults to -15)
shadow-offset-y = -3; # -15 (0- | 0+)


## The red, green, and blue RGB color values of the shadow.
# shadow-red   = 0.0 # 0.0 (0.0 - 1.+0) 
# shadow-green = 0.0 # 0.0 (0.0 - 1.0)
# shadow-blue  = 0.0 # 0.0 (0.0 - 1.0)

## Hex string color value of shadow. This option will override options set 
## with shadow-(red/green/blue). Effectively an alternative way to set it.
# shadow-color = "#000000" # "#000000" (#000000 - #FFFFFF)


## DEPRECATED: 
##  use shadow-exclude = 'bounding_shaped', 
##  or 'bouning_shaped && !rounded_corners'
##
## Do not paint shadows on shaped windows. Note shaped windows here means
## windows setting its shape through X Shape extension. Those using ARGB
## background is beyond our control.
##
# shadow-ignore-shaped = ''


## Shadow rules; each window matched by PATTERN = VALUE, will have no shadow
## painted for it. PATTERN is an X window property, and VALUE is the string to
## string to match against. E.g. 'class_g = "Firefox"' won't shadow Firefox.
## Rule syntax: "shadow-exclude = 'n:e:Notification'"
# shadow_exclude: [ "class_g = 'Cairo-clock'" ]

shadow-exclude = [
    "_NET_WM_STATE@:32a *= '_NET_WM_STATE_HIDDEN'",
    "class_g = 'Cario-clock'",
    "class_g = 'Vmware-view'",
    "class_g = 'i3-frame'",
    "class_g = 'Polybar'",
    # "class_g = 'kitty'"
];


## Shadow clipping rules. Windows matching these rules will not have a shadow
## painted on them. Useful for dock windows, for instance. PATTERN is an X 
## window property, and VALUE is the string to match against. E.g. including
## 'class_g = "Firefox"' will prevent painting a shadow over FireFox.
# clip-shadow-above = [] # [] (["PATTERN = 'VALUE'",])


## Specify a X geometry that describes the region in which shadow should not
## be painted in, such as a dock window region. For example, you can set it to
## "x10+0+0" if the 10 pixels on the bottom of the screen should not have any
## any shadows painted over them. Same as clip-shadow-above, but manual.
# shadow-exclude-reg = "" 


## Crop shadow of a window fully on a particular Xinerama screen to the screen.
# xinerama-shadow-crop = false



###############################################################################
## -------| Fade |-----------------------------------------------| 3883340f |--
###############################################################################
##
## Fade windows in/out when opening/closing and when opacity changes, unless 
## no-fading-openclose is used. 
fading = true; # false (true | false)


## Opacity change between steps while fading in.
fade-in-step = 0.03; # 0.028 (0.01 - 1.0)


## Opacity change between steps while fading out. (0.01 - 1.0, defaults to 0.03)
fade-out-step = 0.06; # 0.03 (0.01 - 1.0)


# The time between steps in fade step, in milliseconds. (> 0, defaults to 10)
fade-delta = 9; # 10 (> 0)

## Fade exclude rules. Exclude windows from being faded with these rules.
# fade-exclude = []

## Do not fade on window open/close.
# no-fading-openclose = false

## Do not fade destroyed ARGB windows with WM frame. Workaround of bugs in 
## Openbox, Fluxbox, etc.
no-fading-destroyed-argb = true
## >-------------------------------------| Start |-> 3883340f >-< 0c04db4c >-<


###############################################################################
## -------| Window Corners |--------------------------------------| 5f17e558 |- 
###############################################################################
corner-radius = 5;



###############################################################################
## -------| Backend Settings |------------------------------------| 99b5d52f |- 
###############################################################################

## Enable remote control via D-Bus. See the man page for more details.
# dbus = false # true (true | false)


## Daemonize process. Fork to background after initialization. 
## Causes issues with certain (badly-written) drivers.
# daemon = false; # false (true | false)


## Specify the rendering backend to use. 'glx' is typically the fastest, and
## recommended, but is less compatible as opposed to 'xrender', and lastly,
## 'xr_glx_hybrid' is not recommended, it's just lacking and probably old.
# `xrender` is the default one.
backend = "glx"; # "xrender" ("xrender" | "glx" | "xr_glx_hybrid")


## Enable/disable VSync.
vsync = false; # false (true | false)


## Enable remote control via D-Bus. See the *D-BUS API* section in manpage
##
# dbus = false # false (true | false)


## Try to detect WM windows (a non-override-redirect window with no 
## child that has 'WM_STATE') and mark them as active.
##
mark-wmwin-focused = true; # false (true | false)


## Mark override-redirect windows that doesn't have a child window with 'WM_STATE' focused.
## mark-ovredir-focused = false
mark-ovredir-focused = true; # false (true | false)


## Try to detect windows with rounded corners and don't consider them 
## shaped windows. The accuracy is not very high, unfortunately.
# detect-rounded-corners = false
detect-rounded-corners = true; # false (true | false)


## Detect '_NET_WM_WINDOW_OPACITY' on client windows, useful for window managers
## not passing '_NET_WM_WINDOW_OPACITY' of client windows to frame windows.
##
# detect-client-opacity = false
detect-client-opacity = true; # false (true | false)


## Specify refresh rate of the screen. If not specified or 0, picom will 
## try detecting this with X RandR extension.
##
refresh-rate = 60 # 60 (0+)

## Limit picom to repaint at most once every 1 / 'refresh_rate' second to 
## boost performance. This should not be used with vsync drm/opengl/opengl-oml 
## as they essentially does sw-opti's job already, unless you wish to specify a 
## lower refresh rate than the actual value.
## 
# sw-opti = 


## Use EWMH '_NET_ACTIVE_WINDOW' to determine currently focused window, rather
## than listening to 'FocusIn'/'FocusOut' event. Might have more accuracy,
## provided that the WM supports it.
## 
# use-ewmh-active-win = false


## Unredirect all windows if a full-screen opaque window is detected, 
## to maximize performance for full-screen windows. Known to cause flickering 
## when redirecting/unredirecting windows.
## 
# unredir-if-possible = false


## Delay before unredirecting the window, in milliseconds. Defaults to 0.
# unredir-if-possible-delay = 0


## Conditions of windows that shouldn't be considered full-screen for unredirecting screen.
# unredir-if-possible-exclude = []


## Use 'WM_TRANSIENT_FOR' to group windows, and consider windows 
## in the same group focused at the same time.
## 
# detect-transient = false
detect-transient = true; # true (true | false)


## Use 'WM_CLIENT_LEADER' to group windows, and consider windows in the same
## group focused at the same time. This usually means windows from the same application
## will be considered focused or unfocused at the same time.
## 'WM_TRANSIENT_FOR' has higher priority if detect-transient is enabled, too.
## 
detect-client-leader = false; # false (true | false)


## Resize damaged region by a specific number of pixels. A positive value
## enlarges it while a negative one shrinks it. If the value is positive, those
## additional pixels will not be actually painted to screen, only used in blur
## calculation, and such. (Due to technical limitations, with use-damage, those 
## pixels will still be incorrectly painted to screen.) Primarily used to fix
## the line corruption issues of blur, in which case you should use the blur
## radius value here (e.g. with a 3x3 kernel, you should use `--resize-damage 1`,
## with a 5x5 one you use `--resize-damage 2`, and so on). May or may not
## work with *--glx-no-stencil*. Shrinking doesn't function correctly.
# resize-damage = 1 # (1+)


## Specify a list of conditions of windows that should be painted with inverted color. 
## Resource-hogging, and is not well tested.
# invert-color-include = []


## GLX backend: Avoid using stencil buffer, useful if you don't have a stencil buffer. 
## Might cause incorrect opacity when rendering transparent content (but never 
## practically happened) and may not work with blur-background. 
## My tests show a 15% performance boost. Recommended.
## 
# glx-no-stencil = false # false (true | false)


## GLX backend: Avoid rebinding pixmap on window damage. 
## Probably could improve performance on rapid window content changes, 
## but is known to break things on some drivers (LLVMpipe, xf86-video-intel, etc.).
## Recommended if it works.
## 
glx-no-rebind-pixmap = false; # false (true | false)


## Disable the use of damage information. This cause the whole screen to be 
## redrawn everytime, instead of the part of the screen has actually changed. 
##
## Potentially degrades the performance, but might fix some artifacts. The 
## opposing option is use-damage u
##
# no-use-damage = false # false (true | false)
use-damage = true; # true (true | false)


## Use X Sync fence to sync clients' draw calls, to make sure all draw 
## calls are finished before picom starts drawing. Needed on nvidia-drivers 
## with GLX backend for some users.
## 
xrender-sync-fence = false


## GLX Backend: Use specified GLSL fragment shader for rendering window contents. 
## For examples, check the source tree for:
##    - `compton-default-fshader-win.glsl` 
##    - `compton-fake-transparency-fshader-win.glsl` 
## 
# glx-fshader-win = ""


## Force all windows to be painted with blending. Useful if you 
## have a glx-fshader-win that could turn opaque pixels transparent.
## 
# force-win-blend = false


## Do not use EWMH to detect fullscreen windows. 
## Reverts to checking if a window is fullscreen based only on its size and coordinates.
## 
# no-ewmh-fullscreen = false


## Dimming bright windows so their brightness doesn't exceed this set value.
## Brightness of a window is estimated by averaging all pixels in the window, so
## this could comes with a performance hit. Setting this to 1.0 disables this
## behaviour. Requires --use-damage to be disabled. (default: 1.0)
## 
# max-brightness = 1.0


## Make transparent windows clip other windows like non-transparent windows do,
## instead of blending on top of them.
## 
# transparent-clipping = false


## Set the log level. Possible values are:
##  "trace", "debug", "info", "warn", "error"
## in increasing level of importance. Case doesn't matter. 
## If using the "TRACE" log level, it's better to log into a file 
## using *--log-file*, since it can generate a huge stream of logs.
## 
# log-level = "debug"
log-level = "warn";


## Set the log file.
## If *--log-file* is never specified, logs will be written to stderr. 
## Otherwise, logs will to written to the given file, though some of the early 
## logs might still be written to the stderr. 
## When setting this option from the config file, it is recommended to use an absolute path.
## 
# log-file = "/path/to/your/log/file"


## Show all X errors (for debugging)
# show-all-xerrors = false


## Write process ID to a file.
# write-pid-path = "/path/to/your/log/file"



###############################################################################
## -------| Window Type Settings |--------------------------------| 3a649f2e |- 
###############################################################################

## 'WINDOW_TYPE' is one of the 15 window types defined in EWMH standard: 
##     "unknown", "desktop", "dock", "toolbar", "menu", "utility", 
##     "splash", "dialog", "normal", "dropdown_menu", "popup_menu", 
##     "tooltip", "notification", "combo", and "dnd".
## 
## Following per window-type options are available: ::
## 
##   fade, shadow:::
##     Controls window-type-specific shadow and fade settings.
## 
##   opacity:::
##     Controls default opacity of the window type.
## 
##   focus:::
##     Controls whether the window of this type is to be always considered focused. 
##     (By default, all window types except "normal" and "dialog" has this on.)
## 
##   full-shadow:::
##     Controls whether shadow is drawn under the parts of the window that you 
##     normally won't be able to see. Useful when the window has parts of it 
##     transparent, and you want shadows in those areas.
## 
##   clip-shadow-above:::
##     Controls wether shadows that would have been drawn above the window should
##     be clipped. Useful for dock windows that should have no shadow painted on top.
##
##   redir-ignore:::
##     Controls whether this type of windows should cause screen to become 
##     redirected again after been unredirected. If you have unredir-if-possible
##     set, and doesn't want certain window to cause unnecessary screen redirection, 
##     you can set this to `true`.
##

wintypes: {
  tooltip = {
    fade = true;
    shadow = true;
    opacity = 0.9;
    focus = true;
    full-shadow = false;
  };

  dock = {
    shadow = false; 
  };

  dnd = {
    shadow = false; 
  };

  popup_menu = {
    opacity = 0.95; 
  };

  dropdown_menu = {
    opacity = 0.95; 
  };
};
